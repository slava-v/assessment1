<?php
/**
 * Created by PhpStorm.
 * User: slava
 * Date: 6/7/18
 * Time: 8:03 PM
 */

namespace Tests\Functional;


use AssessmentApp\Entities\Node;
use AssessmentApp\Repositories\Interfaces\INodeRepository;
use AssessmentApp\Services\NodeService;
use AutoMapperPlus\AutoMapperInterface;
use PHPUnit\Framework\TestCase;

class NodeServiceTest extends TestCase
{
    private $autoMapper;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->autoMapper = new \AutoMapperPlus\AutoMapper(new \AssessmentApp\Automappers\NodeAutoMapper());
    }


    public function testGetNode_Successful()
    {
        // Arrange
        $node = new Node();
        $node_stdClassVersion = json_decode(json_encode($node));

        $repositoryMock = $this->createMock(INodeRepository::class);
        $repositoryMock
            ->expects($this->once())
            ->method('getById')
            ->willReturn($node_stdClassVersion);

        $nodeService = new NodeService($repositoryMock, $this->autoMapper);

        //Act
        $nodeReturned = $nodeService->getNode($node->getId());

        //Assert
        $this->assertInstanceOf(Node::class, $nodeReturned);
        $this->assertEquals($node->getId(), $nodeReturned->getId());
    }

    public function testAddNode_Successful()
    {
        // Arrange
        $node = new Node();
        $node_stdClassVersion = json_decode(json_encode($node));

        $repositoryMock = $this->createMock(INodeRepository::class);
        $repositoryMock
            ->expects($this->once())
            ->method('getById')
            ->willReturn($node_stdClassVersion);

        $nodeService = new NodeService($repositoryMock, $this->autoMapper);

        //Act
        $nodeReturned = $nodeService->getNode($node->getId());

        //Assert
        $this->assertEquals($node->getId(), $nodeReturned->getId());
        $this->assertInstanceOf(Node::class, $nodeReturned);
    }

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testGetNode_ThrowsException()
    {
        // Arrange

        $repositoryMock = $this->createMock(INodeRepository::class);

        $nodeService = new NodeService($repositoryMock, $this->autoMapper);

        //Act
        $nodeReturned = $nodeService->getNode('');

        //Assert performed in annotation
    }

    public function testUpdateNode_Successful()
    {
        // Arrange
        $node = new Node();
        $node_stdClassVersion = json_decode(json_encode($node));

        $repositoryMock = $this->createMock(INodeRepository::class);
        $repositoryMock
            ->expects($this->once())
            ->method('getById')
            ->willReturn($node_stdClassVersion);

        $repositoryMock
            ->expects($this->once())
            ->method('update')
            ->willReturn(true);

        $nodeService = new NodeService($repositoryMock, $this->autoMapper);

        //Act
        $result = $nodeService->updateNode($node);

        //Assert
        $this->assertTrue($result);
    }

    /**
     * @expectedException \AssessmentApp\Exceptions\NodeNotFoundException
     */
    public function testUpdateNode_NonExistent_NodeId_ThrowsException()
    {
        $nonexistent = true;
        // Arrange
        $node = new Node();
        $node_stdClassVersion = json_decode(json_encode($node));

        $repositoryMock = $this->createMock(INodeRepository::class);
        $repositoryMock
            ->expects($this->once())
            ->method('getById')
            ->willReturn(null);

        $repositoryMock
            ->expects($this->never())
            ->method('update');

        $nodeService = new NodeService($repositoryMock, $this->autoMapper);

        //Act
        $result = $nodeService->updateNode($node);

        //Assert
        $this->assertFalse($result);
    }

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testUpdateNode_NoNodeId_ThrowsException()
    {
        // Arrange
        $node = new Node(123);
        $node_stdClassVersion = json_decode(json_encode($node));

        $repositoryMock = $this->createMock(INodeRepository::class);
        $repositoryMock
            ->expects($this->never())
            ->method('getById');

        $repositoryMock
            ->expects($this->never())
            ->method('update');

        $nodeService = new NodeService($repositoryMock, $this->autoMapper);

        //Act
        $result = $nodeService->updateNode($node);

        //Assert
        $this->assertFalse($result);
    }
    
}